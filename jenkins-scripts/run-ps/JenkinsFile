pipeline {
    agent any
    
    parameters {
        string(name: 'REMOTE_SERVER', defaultValue: '', description: 'Remote Windows Server IP or hostname')
        string(name: 'USERNAME', defaultValue: '', description: 'Username for remote server')
        password(name: 'PASSWORD', defaultValue: '', description: 'Password for remote server')
    }
    
    stages {
        stage('Execute PowerShell on Remote Server') {
            steps {
                script {
                    // Read the PowerShell script content from Jenkins workspace
                    def scriptContent = readFile('jenkins-scripts/run-ps/get-hostname.ps1')
                    
                    // Execute the script content on remote server
                    powershell """
                        \$securePassword = ConvertTo-SecureString '${params.PASSWORD}' -AsPlainText -Force
                        \$credential = New-Object System.Management.Automation.PSCredential('${params.USERNAME}', \$securePassword)
                        
                        # Define the script block with our PowerShell commands
                        \$scriptBlock = {
                            # Execute the hostname commands
                            Write-Host "=== Remote Server Information ===" -ForegroundColor Green
                            Write-Host "Server Hostname: \$(hostname)" -ForegroundColor Yellow
                            Write-Host "Current User: \$(\$env:USERNAME)" -ForegroundColor Yellow
                            Write-Host "Current Date/Time: \$(Get-Date)" -ForegroundColor Yellow
                            Write-Host "=================================" -ForegroundColor Green
                        }
                        
                        # Execute on remote server
                        Invoke-Command -ComputerName '${params.REMOTE_SERVER}' -Credential \$credential -ScriptBlock \$scriptBlock
                    """
                }
            }
        }
    }
    
    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'PowerShell script executed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check the logs for errors.'
        }
    }
}
